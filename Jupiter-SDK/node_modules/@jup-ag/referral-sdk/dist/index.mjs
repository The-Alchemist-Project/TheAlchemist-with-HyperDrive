var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/referral.ts
import { AnchorProvider, Program } from "@coral-xyz/anchor";

// src/idl.ts
var IDL = {
  version: "0.1.0",
  name: "referral",
  instructions: [
    {
      name: "initializeProject",
      accounts: [
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "base",
          isMut: false,
          isSigner: true
        },
        {
          name: "admin",
          isMut: false,
          isSigner: false
        },
        {
          name: "project",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "InitializeProjectParams"
          }
        }
      ]
    },
    {
      name: "initializeReferralAccount",
      accounts: [
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "partner",
          isMut: false,
          isSigner: false
        },
        {
          name: "project",
          isMut: false,
          isSigner: false
        },
        {
          name: "referralAccount",
          isMut: true,
          isSigner: true
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "InitializeReferralAccountParams"
          }
        }
      ]
    },
    {
      name: "initializeReferralAccountWithName",
      accounts: [
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "partner",
          isMut: false,
          isSigner: false
        },
        {
          name: "project",
          isMut: false,
          isSigner: false
        },
        {
          name: "referralAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "InitializeReferralAccountWithNameParams"
          }
        }
      ]
    },
    {
      name: "updateProject",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "project",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "UpdateProjectParams"
          }
        }
      ]
    },
    {
      name: "transferProject",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "newAdmin",
          isMut: false,
          isSigner: false
        },
        {
          name: "project",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "TransferProjectParams"
          }
        }
      ]
    },
    {
      name: "updateReferralAccount",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "project",
          isMut: false,
          isSigner: false
        },
        {
          name: "referralAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "UpdateReferralAccountParams"
          }
        }
      ]
    },
    {
      name: "transferReferralAccount",
      accounts: [
        {
          name: "partner",
          isMut: false,
          isSigner: true
        },
        {
          name: "newPartner",
          isMut: false,
          isSigner: false
        },
        {
          name: "referralAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "TransferReferralAccountParams"
          }
        }
      ]
    },
    {
      name: "initializeReferralTokenAccount",
      accounts: [
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "project",
          isMut: false,
          isSigner: false
        },
        {
          name: "referralAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "referralTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "claim",
      accounts: [
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "project",
          isMut: false,
          isSigner: false
        },
        {
          name: "admin",
          isMut: false,
          isSigner: false
        },
        {
          name: "projectAdminTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "referralAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "referralTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "partner",
          isMut: false,
          isSigner: false
        },
        {
          name: "partnerTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    }
  ],
  accounts: [
    {
      name: "project",
      type: {
        kind: "struct",
        fields: [
          {
            name: "base",
            type: "publicKey"
          },
          {
            name: "admin",
            type: "publicKey"
          },
          {
            name: "name",
            type: "string"
          },
          {
            name: "defaultShareBps",
            type: "u16"
          }
        ]
      }
    },
    {
      name: "referralAccount",
      type: {
        kind: "struct",
        fields: [
          {
            name: "partner",
            type: "publicKey"
          },
          {
            name: "project",
            type: "publicKey"
          },
          {
            name: "shareBps",
            type: "u16"
          },
          {
            name: "name",
            type: {
              option: "string"
            }
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "InitializeProjectParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: "string"
          },
          {
            name: "defaultShareBps",
            type: "u16"
          }
        ]
      }
    },
    {
      name: "InitializeReferralAccountWithNameParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: "string"
          }
        ]
      }
    },
    {
      name: "InitializeReferralAccountParams",
      type: {
        kind: "struct",
        fields: []
      }
    },
    {
      name: "TransferProjectParams",
      type: {
        kind: "struct",
        fields: []
      }
    },
    {
      name: "TransferReferralAccountParams",
      type: {
        kind: "struct",
        fields: []
      }
    },
    {
      name: "UpdateProjectParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: {
              option: "string"
            }
          },
          {
            name: "defaultShareBps",
            type: {
              option: "u16"
            }
          }
        ]
      }
    },
    {
      name: "UpdateReferralAccountParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "shareBps",
            type: "u16"
          }
        ]
      }
    }
  ],
  events: [
    {
      name: "InitializeProjectEvent",
      fields: [
        {
          name: "project",
          type: "publicKey",
          index: false
        },
        {
          name: "admin",
          type: "publicKey",
          index: false
        },
        {
          name: "name",
          type: "string",
          index: false
        },
        {
          name: "defaultShareBps",
          type: "u16",
          index: false
        }
      ]
    },
    {
      name: "UpdateProjectEvent",
      fields: [
        {
          name: "project",
          type: "publicKey",
          index: false
        },
        {
          name: "name",
          type: "string",
          index: false
        },
        {
          name: "defaultShareBps",
          type: "u16",
          index: false
        }
      ]
    },
    {
      name: "InitializeReferralAccountEvent",
      fields: [
        {
          name: "project",
          type: "publicKey",
          index: false
        },
        {
          name: "partner",
          type: "publicKey",
          index: false
        },
        {
          name: "referralAccount",
          type: "publicKey",
          index: false
        },
        {
          name: "shareBps",
          type: "u16",
          index: false
        },
        {
          name: "name",
          type: {
            option: "string"
          },
          index: false
        }
      ]
    },
    {
      name: "UpdateReferralAccountEvent",
      fields: [
        {
          name: "referralAccount",
          type: "publicKey",
          index: false
        },
        {
          name: "shareBps",
          type: "u16",
          index: false
        }
      ]
    },
    {
      name: "InitializeReferralTokenAccountEvent",
      fields: [
        {
          name: "project",
          type: "publicKey",
          index: false
        },
        {
          name: "referralAccount",
          type: "publicKey",
          index: false
        },
        {
          name: "referralTokenAccount",
          type: "publicKey",
          index: false
        },
        {
          name: "mint",
          type: "publicKey",
          index: false
        }
      ]
    },
    {
      name: "ClaimEvent",
      fields: [
        {
          name: "project",
          type: "publicKey",
          index: false
        },
        {
          name: "projectAdminTokenAccount",
          type: "publicKey",
          index: false
        },
        {
          name: "referralAccount",
          type: "publicKey",
          index: false
        },
        {
          name: "referralTokenAccount",
          type: "publicKey",
          index: false
        },
        {
          name: "partnerTokenAccount",
          type: "publicKey",
          index: false
        },
        {
          name: "mint",
          type: "publicKey",
          index: false
        },
        {
          name: "referralAmount",
          type: "u64",
          index: false
        },
        {
          name: "projectAmount",
          type: "u64",
          index: false
        }
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "InvalidCalculation"
    },
    {
      code: 6001,
      name: "InvalidSharePercentage"
    },
    {
      code: 6002,
      name: "NameTooLong"
    }
  ]
};

// src/referral.ts
import {
  PublicKey as PublicKey3
} from "@solana/web3.js";

// src/constant.ts
import { PublicKey } from "@solana/web3.js";
var PROGRAM_ID_BY_CLUSTER = {
  localnet: new PublicKey("9vhgK3i91cTwTHQag85zoA3PmJUTfgvgYFc9AJPRNhGn"),
  devnet: new PublicKey("9vhgK3i91cTwTHQag85zoA3PmJUTfgvgYFc9AJPRNhGn"),
  "mainnet-beta": new PublicKey("REFER4ZgmyYx9c6He5XfaTMiGfdLwRnkV4RPp9t9iF3")
};

// src/utils.ts
import {
  createAssociatedTokenAccountInstruction,
  createCloseAccountInstruction,
  createSyncNativeInstruction,
  getAssociatedTokenAddress,
  NATIVE_MINT,
  TOKEN_PROGRAM_ID
} from "@solana/spl-token";
import {
  SystemProgram
} from "@solana/web3.js";
var getOrCreateATAInstruction = (_0, _1, _2, ..._3) => __async(void 0, [_0, _1, _2, ..._3], function* (tokenMint, owner, connection, payer = owner, allowOwnerOffCurve = true, tokenProgram = TOKEN_PROGRAM_ID) {
  let toAccount;
  try {
    toAccount = yield getAssociatedTokenAddress(
      tokenMint,
      owner,
      allowOwnerOffCurve,
      tokenProgram
    );
    const account = yield connection.getAccountInfo(toAccount);
    if (!account) {
      const ix = createAssociatedTokenAccountInstruction(
        payer,
        toAccount,
        owner,
        tokenMint,
        tokenProgram
      );
      return [toAccount, ix];
    }
    return [toAccount, void 0];
  } catch (e) {
    console.error("Error::getOrCreateATAInstruction", e);
    throw e;
  }
});

// src/referral.ts
import {
  AccountLayout,
  TOKEN_2022_PROGRAM_ID,
  TOKEN_PROGRAM_ID as TOKEN_PROGRAM_ID2
} from "@solana/spl-token";
var useReferral = (connection, cluster) => {
  return new ReferralProvider(connection, cluster);
};
var ReferralProvider = class {
  constructor(connection, cluster = "mainnet-beta") {
    this.connection = connection;
    const provider = new AnchorProvider(
      connection,
      {},
      AnchorProvider.defaultOptions()
    );
    this.program = new Program(IDL, PROGRAM_ID_BY_CLUSTER[cluster], provider);
  }
  getProjects() {
    return __async(this, arguments, function* (filters = []) {
      return yield this.program.account.project.all(filters);
    });
  }
  getProject(pubkey) {
    return __async(this, null, function* () {
      return yield this.program.account.project.fetch(pubkey);
    });
  }
  getReferralAccount(pubkey) {
    return __async(this, null, function* () {
      return yield this.program.account.referralAccount.fetch(pubkey);
    });
  }
  getReferralAccounts() {
    return __async(this, arguments, function* (filters = []) {
      return yield this.program.account.referralAccount.all(filters);
    });
  }
  getReferralAccountWithNamePubKey({
    projectPubKey,
    name
  }) {
    const [referralAccountPubKey] = PublicKey3.findProgramAddressSync(
      [Buffer.from("referral"), projectPubKey.toBuffer(), Buffer.from(name)],
      this.program.programId
    );
    return referralAccountPubKey;
  }
  getReferralTokenAccountPubKey({
    referralAccountPubKey,
    mint
  }) {
    const [referralTokenAccountPubKey] = PublicKey3.findProgramAddressSync(
      [
        Buffer.from("referral_ata"),
        referralAccountPubKey.toBuffer(),
        mint.toBuffer()
      ],
      this.program.programId
    );
    return referralTokenAccountPubKey;
  }
  getReferralTokenAccounts(referralAccountAddress) {
    return __async(this, null, function* () {
      const referralAccount = yield this.program.account.referralAccount.fetch(
        new PublicKey3(referralAccountAddress)
      );
      const [tokenAccounts, token2022Accounts] = yield Promise.all(
        [TOKEN_PROGRAM_ID2, TOKEN_2022_PROGRAM_ID].map((programId) => __async(this, null, function* () {
          const mintSet = /* @__PURE__ */ new Set();
          const tokenAccountSet = /* @__PURE__ */ new Set();
          const allTokenAccounts = yield this.connection.getTokenAccountsByOwner(
            referralAccount.project,
            { programId }
          );
          allTokenAccounts.value.map((tokenAccount) => {
            const accountData = AccountLayout.decode(tokenAccount.account.data);
            if (!mintSet.has(accountData.mint.toBase58())) {
              mintSet.add(accountData.mint.toBase58());
            }
            tokenAccountSet.add(tokenAccount.pubkey.toBase58());
          });
          return Array.from(mintSet).map((mint) => {
            const address = this.getReferralTokenAccountPubKey({
              referralAccountPubKey: new PublicKey3(referralAccountAddress),
              mint: new PublicKey3(mint)
            });
            if (tokenAccountSet.has(address.toBase58()))
              return address.toBase58();
            return null;
          }).filter(Boolean);
        }))
      );
      return { tokenAccounts, token2022Accounts };
    });
  }
  initializeProject(_0) {
    return __async(this, arguments, function* ({
      basePubKey,
      adminPubKey,
      name,
      defaultShareBps
    }) {
      const [projectPubKey] = PublicKey3.findProgramAddressSync(
        [Buffer.from("project"), basePubKey.toBuffer()],
        this.program.programId
      );
      return yield this.program.methods.initializeProject({ name, defaultShareBps }).accounts({
        admin: adminPubKey,
        project: projectPubKey,
        base: basePubKey
      }).transaction();
    });
  }
  transferProject(_0) {
    return __async(this, arguments, function* ({
      newAdminPubKey,
      projectPubKey
    }) {
      const project = yield this.program.account.project.fetch(projectPubKey);
      return yield this.program.methods.transferProject({}).accounts({
        admin: project.admin,
        project: projectPubKey,
        newAdmin: newAdminPubKey
      }).transaction();
    });
  }
  initializeReferralAccount(_0) {
    return __async(this, arguments, function* ({
      projectPubKey,
      partnerPubKey,
      payerPubKey,
      referralAccountPubKey
    }) {
      return yield this.program.methods.initializeReferralAccount({}).accounts({
        project: projectPubKey,
        partner: partnerPubKey,
        referralAccount: referralAccountPubKey,
        payer: payerPubKey
      }).transaction();
    });
  }
  initializeReferralAccountWithName(_0) {
    return __async(this, arguments, function* ({
      projectPubKey,
      partnerPubKey,
      payerPubKey,
      name
    }) {
      const referralAccountPubKey = yield this.getReferralAccountWithNamePubKey({
        projectPubKey,
        name
      });
      const tx = yield this.program.methods.initializeReferralAccountWithName({ name }).accounts({
        project: projectPubKey,
        partner: partnerPubKey,
        referralAccount: referralAccountPubKey,
        payer: payerPubKey
      }).transaction();
      return { tx, referralAccountPubKey };
    });
  }
  transferReferralAccount(_0) {
    return __async(this, arguments, function* ({
      newPartnerPubKey,
      referralAccountPubKey
    }) {
      const referralAccount = yield this.program.account.referralAccount.fetch(
        referralAccountPubKey
      );
      return yield this.program.methods.transferReferralAccount({}).accounts({
        partner: referralAccount.partner,
        newPartner: newPartnerPubKey,
        referralAccount: referralAccountPubKey
      }).transaction();
    });
  }
  initializeReferralTokenAccount(_0) {
    return __async(this, arguments, function* ({
      payerPubKey,
      referralAccountPubKey,
      mint,
      tokenProgram = TOKEN_PROGRAM_ID2
    }) {
      const referralAccount = yield this.program.account.referralAccount.fetch(
        referralAccountPubKey
      );
      const referralTokenAccountPubKey = yield this.getReferralTokenAccountPubKey(
        {
          referralAccountPubKey,
          mint
        }
      );
      const tx = yield this.program.methods.initializeReferralTokenAccount().accounts({
        payer: payerPubKey,
        project: referralAccount.project,
        referralAccount: referralAccountPubKey,
        referralTokenAccount: referralTokenAccountPubKey,
        mint,
        tokenProgram
      }).transaction();
      return { tx, referralTokenAccountPubKey };
    });
  }
  claim(_0) {
    return __async(this, arguments, function* ({
      payerPubKey,
      referralAccountPubKey,
      mint,
      tokenProgram = TOKEN_PROGRAM_ID2
    }) {
      const referralAccount = yield this.program.account.referralAccount.fetch(
        referralAccountPubKey
      );
      const project = yield this.program.account.project.fetch(
        referralAccount.project
      );
      const [
        referralTokenAccountPubKey,
        [partnerTokenAccount, createPartnerTokenAccountIx],
        [projectAdminTokenAccount, createProjectAdminTokenAccountIx]
      ] = yield Promise.all([
        this.getReferralTokenAccountPubKey({
          referralAccountPubKey,
          mint
        }),
        getOrCreateATAInstruction(
          mint,
          referralAccount.partner,
          this.connection,
          void 0,
          void 0,
          tokenProgram
        ),
        getOrCreateATAInstruction(
          mint,
          project.admin,
          this.connection,
          void 0,
          void 0,
          tokenProgram
        )
      ]);
      let preInstructions = [];
      if (createPartnerTokenAccountIx)
        preInstructions.push(createPartnerTokenAccountIx);
      if (createProjectAdminTokenAccountIx)
        preInstructions.push(createProjectAdminTokenAccountIx);
      return yield this.program.methods.claim().accounts({
        payer: payerPubKey,
        project: referralAccount.project,
        admin: project.admin,
        projectAdminTokenAccount,
        referralAccount: referralAccountPubKey,
        referralTokenAccount: referralTokenAccountPubKey,
        partner: referralAccount.partner,
        partnerTokenAccount,
        mint
      }).preInstructions(preInstructions).transaction();
    });
  }
};

// src/filter.ts
var projectAdminFilter = (publicKey) => {
  return {
    memcmp: {
      offset: 8 + 32,
      bytes: publicKey.toBase58()
    }
  };
};
var referralAccountPartnerFilter = (publicKey) => {
  return {
    memcmp: {
      offset: 8,
      bytes: publicKey.toBase58()
    }
  };
};
var referralAccountProjectFilter = (publicKey) => {
  return {
    memcmp: {
      offset: 8 + 32,
      bytes: publicKey.toBase58()
    }
  };
};
export {
  IDL,
  PROGRAM_ID_BY_CLUSTER,
  ReferralProvider,
  projectAdminFilter,
  referralAccountPartnerFilter,
  referralAccountProjectFilter,
  useReferral
};
//# sourceMappingURL=index.mjs.map